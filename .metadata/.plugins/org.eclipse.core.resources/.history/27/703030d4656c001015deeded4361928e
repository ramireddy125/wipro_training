package com.day_9;
import java.util.*;

class Patient {
    String id;
    String name;

    Patient(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String toString() {
        return "Patient[ID=" + id + ", Name=" + name + "]";
    }
}

public class HashSet {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        LinkedList<Patient> patientQueue = new LinkedList<>();

        while (true) {
            System.out.println("\n=== Hospital Queue Menu ===");
            System.out.println("1. Add Patient (Normal)");
            System.out.println("2. Add Emergency Patient (Front)");
            System.out.println("3. Remove Patient by ID");
            System.out.println("4. View All Patients");
            System.out.println("5. View First Patient");
            System.out.println("6. View Last Patient");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            int ch = sc.nextInt();
            sc.nextLine(); 

            switch (ch) {
                case 1:
                    System.out.print("Enter Patient ID: ");
                    String id = sc.nextLine();
                    System.out.print("Enter Name: ");
                    String name = sc.nextLine();
                    patientQueue.addLast(new Patient(id, name));
                    System.out.println("✅ Patient added to queue.");
                    break;

                case 2:
                    System.out.print("Enter Emergency Patient ID: ");
                    String eid = sc.nextLine();
                    System.out.print("Enter Name: ");
                    String ename = sc.nextLine();
                    patientQueue.addFirst(new Patient(eid, ename));
                    System.out.println("🚨 Emergency Patient added at front.");
                    break;

                case 3:
                    System.out.print("Enter Patient ID to remove: ");
                    String rid = sc.nextLine();
                    boolean removed = patientQueue.removeIf(p -> p.id.equalsIgnoreCase(rid));
                    if (removed)
                        System.out.println("🗑️ Patient removed from queue.");
                    else
                        System.out.println("❌ Patient not found.");
                    break;

                case 4:
                    System.out.println("📋 Current Queue:");
                    if (patientQueue.isEmpty()) {
                        System.out.println("Queue is empty.");
                    } else {
                        for (Patient p : patientQueue) {
                            System.out.println(p);
                        }
                    }
                    break;

                case 5:
                    if (!patientQueue.isEmpty())
                        System.out.println("🧑‍⚕️ First Patient: " + patientQueue.getFirst());
                    else
                        System.out.println("Queue is empty.");
                    break;

                case 6:
                    if (!patientQueue.isEmpty())
                        System.out.println("🧑‍⚕️ Last Patient: " + patientQueue.getLast());
                    else
                        System.out.println("Queue is empty.");
                    break;

                case 7:
                    System.out.println("👋 Exiting...");
                    return;

                default:
                    System.out.println("❗ Invalid choice.");
            }
            sc.close();
        }
    }
}
