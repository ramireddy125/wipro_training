package com.day_10;

import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

class Appointment {
    String patientName;
    LocalDateTime dateTime;

    Appointment(String patientName, LocalDateTime dateTime) {
        this.patientName = patientName;
        this.dateTime = dateTime;
    }

    public String toString() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
        return patientName + " - " + dateTime.format(formatter);
    }

    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof Appointment)) return false;
        Appointment a = (Appointment) obj;
        return patientName.equalsIgnoreCase(a.patientName) && dateTime.equals(a.dateTime);
    }

    public int hashCode() {
        return Objects.hash(patientName.toLowerCase(), dateTime);
    }
}

public class TreeSet_Ex {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");

        TreeSet<Appointment> appointments = new TreeSet<>(new Comparator<Appointment>() {
            public int compare(Appointment a1, Appointment a2) {
                if (a1.dateTime.equals(a2.dateTime)) {
                    return a1.patientName.compareToIgnoreCase(a2.patientName);
                }
                return a1.dateTime.compareTo(a2.dateTime);
            }
        });

        int choice;
        do {
            System.out.println("\n--- Hospital Appointment System ---");
            System.out.println("1. Add Appointment");
            System.out.println("2. Cancel Appointment");
            System.out.println("3. View Appointments");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter patient name: ");
                    String name = sc.nextLine();

                    System.out.print("Enter date and time (yyyy-MM-dd HH:mm): ");
                    String inputTime = sc.nextLine();

                    LocalDateTime dateTime = LocalDateTime.parse(inputTime, formatter);
                    Appointment newAppt = new Appointment(name, dateTime);

                    if (appointments.contains(newAppt)) {
                        System.out.println("‚ùå Duplicate appointment! Skipped.");
                    } else {
                        appointments.add(newAppt);
                        System.out.println("‚úÖ Appointment added.");
                    }
                    break;

                case 2:
                    System.out.print("Enter patient name to cancel: ");
                    String cancelName = sc.nextLine();

                    System.out.print("Enter date and time (yyyy-MM-dd HH:mm): ");
                    String cancelTime = sc.nextLine();

                    LocalDateTime cancelDateTime = LocalDateTime.parse(cancelTime, formatter);
                    Appointment cancelAppt = new Appointment(cancelName, cancelDateTime);

                    if (appointments.remove(cancelAppt)) {
                        System.out.println("üóëÔ∏è Appointment cancelled.");
                    } else {
                        System.out.println("‚ö†Ô∏è Appointment not found.");
                    }
                    break;

                case 3:
                    System.out.println("\nüìÖ Scheduled Appointments:");
                    if (appointments.isEmpty()) {
                        System.out.println("No appointments scheduled.");
                    } else {
                        for (Appointment a : appointments) {
                            System.out.println(a);
                        }
                    }
                    break;

                case 4:
                    System.out.println("üëã Exiting...");
                    break;

                default:
                    System.out.println("Invalid choice!");
            }

        } while (choice != 4);

        sc.close();
    }
}
