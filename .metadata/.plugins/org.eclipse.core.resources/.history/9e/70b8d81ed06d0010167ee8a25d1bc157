package com.day_11;
import java.util.TreeMap;
import java.util.Map;
import java.util.Scanner;
class Appointment{
	private String patientName;
	private String id;
	private String time;
	
	public Appointment(String patientName, String id,String time) {
		this.patientName = patientName;
		this.id=id;
		this.time=time;
	}
	public String getId(){
		return id;
	}
	public String getName() {
		return patientName;
	}
	public String getTime() {
		return time;
	}
	public void setTime(String time) {
		this.time=time;
	}
	public String toString() {
		return "Id:" + id +"Name:"+patientName+"time:"+time;
	}
}
public class TreeMap_Appointment {

	public static void main(String[] args) {
		TreeMap<String, Appointment> appointmentMap = new TreeMap<>();
		Scanner sc = new Scanner(System.in);
		
		 while (true) {
	            System.out.println("\n===== Appointment Scheduler Menu =====");
	            System.out.println("1. Add Appointment");
	            System.out.println("2. View All Appointments");
	            System.out.println("3. Remove Appointment");
	            System.out.println("4. Reschedule Appointment");
	            System.out.println("5. Check Next and Last Appointments");
	            System.out.println("6. Exit");
	            System.out.print("Choose an option (1-6): ");
	            int choice = sc.nextInt();
	            sc.nextLine(); // consume newline

	            switch (choice) {
	                case 1: // Add Appointment
	                    System.out.print("Enter Appointment ID: ");
	                    String id = sc.nextLine();
	                    System.out.print("Enter Patient Name: ");
	                    String name = sc.nextLine();
	                    System.out.print("Enter Appointment Time: ");
	                    String time = sc.nextLine();
	                    appointmentMap.put(id, new Appointment(id, name, time));
	                    System.out.println("‚úÖ Appointment Added.");
	                    break;

	                case 2: // View All
	                    if (appointmentMap.isEmpty()) {
	                        System.out.println("No appointments found.");
	                    } else {
	                        System.out.println("üóìÔ∏è All Appointments (sorted by ID):");
	                        for (Map.Entry<String, Appointment> entry : appointmentMap.entrySet()) {
	                            System.out.println(entry.getValue());
	                        }
	                    }
	                    break;

	                case 3: // Remove
	                    System.out.print("Enter ID to remove: ");
	                    String removeId = sc.nextLine();
	                    Appointment removed = appointmentMap.remove(removeId);
	                    System.out.println(removed != null ? "‚ùå Removed: " + removed : "‚ö†Ô∏è No appointment found with ID " + removeId);
	                    break;

	                case 4: // Reschedule
	                    System.out.print("Enter ID to reschedule: ");
	                    String rescheduleId = sc.nextLine();
	                    Appointment toUpdate = appointmentMap.get(rescheduleId);
	                    if (toUpdate != null) {
	                        System.out.print("Enter new time: ");
	                        String newTime = sc.nextLine();
	                        toUpdate.setTime(newTime);
	                        System.out.println("‚è∞ Updated Appointment: " + toUpdate);
	                    } else {
	                        System.out.println("‚ö†Ô∏è No appointment found with ID " + rescheduleId);
	                    }
	                    break;

	                case 5: // Next and Last
	                    Map.Entry<String, Appointment> next = appointmentMap.firstEntry();
	                    Map.Entry<String, Appointment> last = appointmentMap.lastEntry();
	                    System.out.println("\nüìå Next Appointment: " + (next != null ? next.getValue() : "None"));
	                    System.out.println("üìå Last Appointment: " + (last != null ? last.getValue() : "None"));
	                    break;

	                case 6:
	                    System.out.println("üëã Exiting...");
	                    sc.close();
	                    return;

	                default:
	                    System.out.println("‚ùå Invalid Option. Try Again.");
	            }
	        }
	}

}
