package com.day_9;
import java.util.*;

class Patient {
    String id;
    String name;

    Patient(String id, String name) {
        this.id = id;
        this.name = name;
    }

    public String toString() {
        return "ID: " + id + ", Name: " + name;
    }
}

public class LinkedList_HospitalQueue {
    public static void main(String[] args) {
        LinkedList<Patient> patientQueue = new LinkedList<>();
        Set<String> patientIds = new HashSet<>(); // To prevent duplicates
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nüè• Hospital Patient Queue Menu:");
            System.out.println("1. Add New Patient (Normal)");
            System.out.println("2. Add Emergency Patient");
            System.out.println("3. Serve (Remove First Patient)");
            System.out.println("4. View All Patients");
            System.out.println("5. View First and Last Patient");
            System.out.println("6. Cancel Appointment (Remove by ID)");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter patient ID: ");
                    String id = sc.nextLine();
                    if (patientIds.contains(id)) {
                        System.out.println("‚ö†Ô∏è Duplicate ID! Patient already exists.");
                        break;
                    }
                    System.out.print("Enter patient name: ");
                    String name = sc.nextLine();
                    Patient p = new Patient(id, name);
                    patientQueue.addLast(p);
                    patientIds.add(id);
                    System.out.println("‚úÖ Patient added to normal queue.");
                    break;

                case 2:
                    System.out.print("Enter emergency patient ID: ");
                    String eid = sc.nextLine();
                    if (patientIds.contains(eid)) {
                        System.out.println("‚ö†Ô∏è Duplicate ID! Patient already exists.");
                        break;
                    }
                    System.out.print("Enter emergency patient name: ");
                    String ename = sc.nextLine();
                    Patient ep = new Patient(eid, ename);
                    patientQueue.addFirst(ep);
                    patientIds.add(eid);
                    System.out.println("üö® Emergency patient added to front of queue.");
                    break;

                case 3:
                    if (!patientQueue.isEmpty()) {
                        Patient removed = patientQueue.removeFirst();
                        patientIds.remove(removed.id);
                        System.out.println("‚úÖ Served & removed patient: " + removed);
                    } else {
                        System.out.println("‚ö†Ô∏è No patients in the queue.");
                    }
                    break;

                case 4:
                    if (patientQueue.isEmpty()) {
                        System.out.println("üìù No patients in queue.");
                    } else {
                        System.out.println("üìã Current Patient Queue:");
                        for (Patient pat : patientQueue) {
                            System.out.println(pat);
                        }
                    }
                    break;

                case 5:
                    if (!patientQueue.isEmpty()) {
                        System.out.println("üë§ First Patient: " + patientQueue.getFirst());
                        System.out.println("üë§ Last Patient: " + patientQueue.getLast());
                    } else {
                        System.out.println("‚ö†Ô∏è Queue is empty.");
                    }
                    break;

                case 6:
                    System.out.print("Enter patient ID to cancel: ");
                    String cancelId = sc.nextLine();
                    boolean found = false;
                    Iterator<Patient> itr = patientQueue.iterator();
                    while (itr.hasNext()) {
                        Patient pat = itr.next();
                        if (pat.id.equals(cancelId)) {
                            itr.remove();
                            patientIds.remove(pat.id);
                            found = true;
                            System.out.println("‚ùå Appointment cancelled for patient ID: " + cancelId);
                            break;
                        }
                    }
                    if (!found) {
                        System.out.println("‚ùì No patient found with ID: " + cancelId);
                    }
                    break;

                case 7:
                    System.out.println("üëã Exiting... Thank you!");
                    break;

                default:
                    System.out.println("‚ö†Ô∏è Invalid choice! Try again.");
            }

        } while (choice != 7);

        sc.close();
    }
}
