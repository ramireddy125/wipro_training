package com.day_9;
import java.util.*;

class Patients {
    String id;
    String name;

    Patients(String id, String name) {
        this.id = id;
        this.name = name;
    }


    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Patients)) return false;
        Patients p = (Patients) o;
        return id.equalsIgnoreCase(p.id);
    }

    public int hashCode() {
        return id.toLowerCase().hashCode();
    }

    public String toString() {
        return "ID: " + id + ", Name: " + name;
    }
}

public class HashSet {
    public static void main(String[] args) {
        LinkedHashSet<Patients> patientQueue = new LinkedHashSet<>();
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n--- Hospital Queue System ---");
            System.out.println("1. Add Patient (Normal)");
            System.out.println("2. Add Emergency Patient");
            System.out.println("3. Remove Patient by ID");
            System.out.println("4. View All Patients");
            System.out.println("5. View First Patient");
            System.out.println("6. View Last Patient");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter Patient ID: ");
                    String id1 = sc.nextLine();
                    System.out.print("Enter Patient Name: ");
                    String name1 = sc.nextLine();
                    Patients normalPatient = new Patients(id1, name1);
                    if (patientQueue.contains(normalPatient)) {
                        System.out.println("Patient already in the queue.");
                    } else {
                        patientQueue.add(normalPatient);
                        System.out.println("Patient added to the queue.");
                    }
                    break;

                case 2:
                    System.out.print("Enter Emergency Patient ID: ");
                    String id2 = sc.nextLine();
                    System.out.print("Enter Emergency Patient Name: ");
                    String name2 = sc.nextLine();
                    Patients emergency = new Patients(id2, name2);
                    if (patientQueue.contains(emergency)) {
                        System.out.println("Patient already in the queue.");
                    } else {
                        LinkedList<Patients> tempList = new LinkedList<>(patientQueue);
                        tempList.addFirst(emergency);
                        patientQueue.clear();
                        patientQueue.addAll(tempList);
                        System.out.println("Emergency patient added to the front.");
                    }
                    break;

                case 3:
                    System.out.print("Enter Patient ID to remove: ");
                    String removeId = sc.nextLine();
                    boolean removed = patientQueue.removeIf(p -> p.id.equalsIgnoreCase(removeId));
                    System.out.println(removed ? "Patient removed." : "Patient not found.");
                    break;

                case 4:
                    if (patientQueue.isEmpty()) {
                        System.out.println("No patients in the queue.");
                    } else {
                        System.out.println("Patients in Queue:");
                        for (Patients p : patientQueue) {
                            System.out.println(p);
                        }
                    }
                    break;

                case 5:
                    if (!patientQueue.isEmpty()) {
                        Patients first = patientQueue.iterator().next();
                        System.out.println("First Patient: " + first);
                    } else {
                        System.out.println("Queue is empty.");
                    }
                    break;

                case 6:
                    if (!patientQueue.isEmpty()) {
                        Patients last = null;
                        for (Patients p : patientQueue) {
                            last = p; 
                        }
                        System.out.println("Last Patient: " + last);
                    } else {
                        System.out.println("Queue is empty.");
                    }
                    break;

                case 0:
                    System.out.println("Exiting system.");
                    break;

                default:
                    System.out.println("Invalid choice.");
            }

        } while (choice != 0);
        sc.close();
    }
}
